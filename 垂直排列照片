import tkinter as tk
from tkinter import filedialog, messagebox
from PIL import Image, ImageDraw, ImageFont
from PIL.ExifTags import TAGS


def get_exif_data(image_path):
    image = Image.open(image_path)
    exif_data = {}
    info = image._getexif()
    if info:
        for tag_id, value in info.items():
            tag = TAGS.get(tag_id, tag_id)
            exif_data[tag] = value
    return exif_data


def create_info_image(width, exif_data):
    info_height = 500  # 增加高度以容纳更多信息
    info_image = Image.new('RGB', (width, info_height), color=(0, 0, 0))
    draw = ImageDraw.Draw(info_image)

    try:
        font = ImageFont.truetype("arial.ttf", 100)  # 尝试使用系统字体
    except:
        font = ImageFont.load_default()

    # 提取相关信息
    camera_make = exif_data.get('Make', 'Unknown')
    camera_model = exif_data.get('Model', 'Unknown')
    focal_length = exif_data.get('FocalLength', 'Unknown')
    if isinstance(focal_length, tuple):
        focal_length = f"{focal_length[0] / focal_length[1]}mm"
    f_stop = exif_data.get('FNumber', 'Unknown')
    if isinstance(f_stop, tuple):
        f_stop = f"f/{f_stop[0] / f_stop[1]:.1f}"
    exposure_time = exif_data.get('ExposureTime', 'Unknown')
    if isinstance(exposure_time, tuple):
        exposure_time = f"1/{int(exposure_time[1] / exposure_time[0])} sec"
    iso = exif_data.get('ISOSpeedRatings', 'Unknown')

    # 构建信息字符串
    info_text = f"Camera: {camera_make} {camera_model}\n"
    info_text += f"Focal Length: {focal_length}\n"
    info_text += f"Aperture: {f_stop}\n"
    info_text += f"Exposure: {exposure_time}\n"
    info_text += f"ISO: {iso}"

    # 绘制信息
    draw.text((10, 10), info_text, fill=(255, 255, 255), font=font)

    return info_image


def select_images():
    file_paths = filedialog.askopenfilenames(filetypes=[("Image files", "*.jpg *.jpeg *.png")])
    if file_paths:
        process_images(file_paths)


def process_images(file_paths):
    images = []
    max_width = 0

    for file_path in file_paths:
        with Image.open(file_path) as img:
            images.append(img.copy())
            max_width = max(max_width, img.width)

    resized_images = []
    total_height = 0
    for img in images:
        aspect_ratio = img.height / img.width
        new_height = int(max_width * aspect_ratio)
        resized_img = img.resize((max_width, new_height), Image.LANCZOS)
        resized_images.append(resized_img)
        total_height += new_height

    exif_data = get_exif_data(file_paths[0])  # 获取第一张图片的EXIF数据
    info_image = create_info_image(max_width, exif_data)
    total_height += info_image.height

    result_image = Image.new('RGB', (max_width, total_height))

    y_offset = 0
    for img in resized_images:
        result_image.paste(img, (0, y_offset))
        y_offset += img.height

    result_image.paste(info_image, (0, y_offset))

    save_path = filedialog.asksaveasfilename(defaultextension=".jpg", filetypes=[("JPEG files", "*.jpg")])
    if save_path:
        result_image.save(save_path, 'JPEG', quality=95)
        messagebox.showinfo("完成", f"拼接图片已保存到: {save_path}")


root = tk.Tk()
root.title("图片拼接工具")

select_button = tk.Button(root, text="选择图片", command=select_images)
select_button.pack(pady=20)

root.mainloop()
